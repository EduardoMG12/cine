// CineVerse Database Schema
// Social network platform for movie enthusiasts
// Generated for https://dbdiagram.io/

Table users {
  id uuid [pk, default: `uuid_generate_v4()`]
  username varchar(30) [unique, not null]
  email varchar(255) [unique, not null]
  display_name varchar(100) [not null]
  bio text
  profile_picture_url text
  password_hash varchar(255)
  is_private boolean [default: false]
  email_verified boolean [default: false]
  theme varchar(10) [default: 'light', note: 'light or dark']
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
  
  indexes {
    username [unique]
    email [unique]
    created_at
  }
}

Table user_sessions {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [ref: > users.id, not null]
  token varchar(255) [unique, not null]
  ip_address inet
  user_agent text
  created_at timestamp [default: `now()`]
  expires_at timestamp [not null]
  
  indexes {
    user_id
    token
    expires_at
  }
}

Table movies {
  id uuid [pk, default: `uuid_generate_v4()`]
  external_api_id varchar(50) [unique, not null, note: 'TMDb ID']
  title varchar(500) [not null]
  overview text
  release_date date
  poster_url text
  backdrop_url text
  genres text[] [note: 'Array of genre names']
  runtime integer [note: 'Runtime in minutes']
  vote_average decimal(3,1)
  vote_count integer
  adult boolean [default: false]
  cache_expires_at timestamptz [not null]
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
  
  indexes {
    external_api_id [unique]
    (title) [type: gin, note: 'Full text search']
    (genres) [type: gin]
    cache_expires_at
  }
}

Table reviews {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [ref: > users.id, not null]
  movie_id uuid [ref: > movies.id, not null]
  rating integer [not null, note: '1-10 scale']
  content text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    user_id
    movie_id
    rating
    created_at
    (user_id, movie_id) [unique, note: 'One review per user per movie']
  }
}

Table movie_lists {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [ref: > users.id, not null]
  name varchar(255) [not null]
  is_default boolean [default: false]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    user_id
    name
  }
}

Table movie_list_entries {
  id uuid [pk, default: `uuid_generate_v4()`]
  movie_list_id uuid [ref: > movie_lists.id, not null]
  movie_id uuid [ref: > movies.id, not null]
  added_at timestamp [default: `now()`]
  
  indexes {
    movie_list_id
    movie_id
    (movie_list_id, movie_id) [unique, note: 'One movie per list']
  }
}

Table friendships {
  user_id_1 uuid [ref: > users.id, not null]
  user_id_2 uuid [ref: > users.id, not null]
  status varchar(20) [not null, note: 'pending, accepted, declined, blocked']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    (user_id_1, user_id_2) [pk]
    user_id_1
    user_id_2
    status
  }
  
  Note: 'user_id_1 < user_id_2 constraint ensures consistent ordering'
}

Table follows {
  follower_id uuid [ref: > users.id, not null]
  following_id uuid [ref: > users.id, not null]
  created_at timestamp [default: `now()`]
  
  indexes {
    (follower_id, following_id) [pk]
    follower_id
    following_id
  }
  
  Note: 'Asymmetric follow relationship - follower_id != following_id'
}

Table posts {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [ref: > users.id, not null]
  content text [not null]
  visibility varchar(20) [not null, note: 'public, private, friends']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    user_id
    visibility
    created_at
  }
}

Table email_verification_tokens {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [ref: > users.id, not null]
  token varchar(255) [unique, not null]
  expires_at timestamp [not null]
  created_at timestamp [default: `now()`]
  
  indexes {
    user_id
    token [unique]
    expires_at
  }
}

Table password_reset_tokens {
  id uuid [pk, default: `uuid_generate_v4()`]
  user_id uuid [ref: > users.id, not null]
  token varchar(255) [unique, not null]
  expires_at timestamp [not null]
  created_at timestamp [default: `now()`]
  
  indexes {
    user_id
    token [unique]
    expires_at
  }
}

Table match_sessions {
  id uuid [pk, default: `uuid_generate_v4()`]
  host_user_id uuid [ref: > users.id, not null]
  status varchar(20) [not null, note: 'active, finished, canceled']
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  
  indexes {
    host_user_id
    status
  }
}

Table match_session_participants {
  session_id uuid [ref: > match_sessions.id, not null]
  user_id uuid [ref: > users.id, not null]
  joined_at timestamp [default: `now()`]
  
  indexes {
    (session_id, user_id) [pk]
  }
}

Table match_interactions {
  session_id uuid [ref: > match_sessions.id, not null]
  user_id uuid [ref: > users.id, not null]
  movie_id uuid [ref: > movies.id, not null]
  liked boolean [not null]
  interacted_at timestamp [default: `now()`]
  
  indexes {
    (session_id, user_id, movie_id) [pk]
  }
}

// Relationships summary:
// - Users can have multiple sessions, reviews, movie lists, posts
// - Users can be friends with other users (bidirectional)
// - Users can follow other users (unidirectional)  
// - Movies can be in multiple lists and have multiple reviews
// - Match sessions allow users to swipe on movies together
// - Authentication tokens provide secure session and password reset functionality
